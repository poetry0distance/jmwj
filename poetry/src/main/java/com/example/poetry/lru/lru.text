private int capacity;

    public LinkLRUCache(int capacity){
        super(capacity,0.75f,true);
        this.capacity = capacity;
    }

    @Override
    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return super.size() > capacity;
    }


package com.lru.nolink;

import com.lru.link.LinkLRUCache;

import java.util.HashMap;
import java.util.Map;

/**
 * 不基于jdk实现lru算法
 *
 * hash + 双向链表
 */
public class LRUCacheNoLink {

    private int capacity;

    /**
     * map 负责查找
     */
    Map<Integer,Node<Integer,Integer>> map;

    DoubleLinkList<Integer,Integer> doubleLinkList;

    public LRUCacheNoLink(int capacity){
        this.capacity = capacity; //坑位
        map = new HashMap<>(); //用于查找
        doubleLinkList = new DoubleLinkList<>();
    }

    /**
     * 获取
     * @param key
     * @return
     */
    public int get(int key){
        if (!map.containsKey(key)){
            return -1;
        }
        Node<Integer, Integer> node = map.get(key);
        doubleLinkList.remove(node);
        doubleLinkList.addHead(node);
        return node.value;
    }

    /**
     * 存值的操作相当于save or update
     * @param key
     * @param value
     */
    public void put(int key ,int value){
        if (map.containsKey(key)){
            Node<Integer, Integer> node = map.get(key);
            node.value = value;
            map.put(key,node);
            doubleLinkList.remove(node);
            doubleLinkList.addHead(node);
        }else {
            if (map.size() >= capacity){
                // 坑位满了
                Node<Integer, Integer> lastNode = doubleLinkList.getLastNode();
                map.remove(key);
                doubleLinkList.remove(lastNode);
            }
            Node<Integer, Integer> newNode = new Node<>(key, value);
            map.put(key,newNode);
            doubleLinkList.addHead(newNode);
        }

    }
    /**
     * 构建双向链表 存储node节点
     * @param <K>
     * @param <V>
     */

    class Node<K,V>{
        K key;
        V value;
        Node<K,V> next;
        Node<K,V> pre;
        public Node(){
            this.pre = this.next = null;
        }
        public Node(K key ,V value){
            this.key = key;
            this.value = value;
            this.pre = this.next = null;
        }
    }

    /**
     * 构造一个双向队列 存储node
     * @param <K>
     * @param <V>
     */
    class DoubleLinkList<K,V>{
        Node<K,V> head;
        Node<K,V> tail;

        public DoubleLinkList(){
            // 构建虚拟链表
            head = new Node<>();
            tail = new Node<>();
            head.next = tail;
            tail.pre = head;
        }

        public void addHead(Node<K,V> node){
            // 都基于head节点为比较对象，做链表的指针转换。
            node.next = head.next;
            node.pre = head;
            head.next = node;
            head.next.pre = node;
        }

        public void remove(Node<K,V> node){
            // 基于当前node节点为比较对象，做链表的指针转换。
            node.pre.next = node.next;
            node.next.pre = node.pre;
            node.pre = null;
            node.next = null;
        }

        public Node<K,V> getLastNode(){
            // 尾节点的前一个节点及为当前链表的最后一个节点
            return tail.pre;
        }

    }

    public static void main(String[] args) {
        LRUCacheNoLink cache = new LRUCacheNoLink(3);
        cache.put(1,1);
        cache.put(2,2);
        cache.put(3,3);
        System.out.println(cache.map.keySet());
        cache.put(1,1);
        System.out.println(cache.map.keySet());
        cache.put(1,1);
        System.out.println(cache.map.keySet());
    }
}

